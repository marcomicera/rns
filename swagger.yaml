openapi: 3.0.0

info:
  version: "2.0-oas3"
  title: RNS web service
  description: Road Navigation Services
  termsOfService: 'https://smartbear.com/terms-of-use/'
  contact:
    email: marco.micera+dp2@gmail.com
    name: Marco Micera
    url: 'https://marcomicera.github.io/'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
    
tags:
  - name: vehicles
    description: Managing vehicles within the RNS system
  - name: places
    description: Retrieving info about RNS places
  - name: connections
    description: How places are connected to each other
    
paths:
  '/vehicles':
    get:
      tags:
        - vehicles
      summary: retrieves all vehicles
      operationId: getVehicles
      description: Retrieves a set containing all vehicles in the RNS system
      parameters:
        - name: since
          in: query
          required: false
          description: The entrance date/time since when vehicles have to be selected
          schema:
            type: string
            format: date-time
        - name: types
          in: query
          required: false
          description: The set of types of vehicles that have to be selected
          schema:
            type: array
            uniqueItems: true
            items:
              $ref: '#/components/schemas/vehicleType'
            minItems: 0
        - name: state
          in: query
          required: false
          description: The state of vehicles to be selected
          schema:
            $ref: '#/components/schemas/vehicleStatus'
        - $ref: '#/components/parameters/pageNumber'
      responses:
        '200':
          description: Vehicles returned
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/vehicles'
            application/json:
              schema:
                $ref: '#/components/schemas/vehicles'
        '400':
          $ref: '#/components/responses/atLeastOneParameterWrong'
  '/vehicles/{id}':
    get:
      tags:
        - vehicles
      summary: retrieves one vehicle
      operationId: getVehicle
      description: Retrieves one vehicle in the RNS system
      parameters:
        - $ref: '#/components/parameters/vehicleId'
      responses:
        '200':
          description: Vehicle found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/vehicle'
            application/json:
              schema:
                $ref: '#/components/schemas/vehicle'
        # '400':
        #   $ref: '#/components/responses/invalidVehicleId'
        '404':
          $ref: '#/components/responses/vehicleNotFound'
  '/vehicles/{id}/origin':
    get:
      tags:
        - vehicles
      summary: retrieves one vehicle's origin
      operationId: getOrigin
      description: Retrieves one vehicle's origin in the RNS system
      parameters:
        - $ref: '#/components/parameters/vehicleId'
      responses:
        '200':
          description: Vehicle's origin found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/place'
            application/json:
              schema:
                $ref: '#/components/schemas/place'
        # '400':
        #   $ref: '#/components/responses/invalidVehicleId'
        '404':
          $ref: '#/components/responses/vehicleNotFound'
  '/vehicles/{id}/position':
    get:
      tags:
        - vehicles
      summary: retrieves one vehicle's position
      operationId: getPosition
      description: Retrieves one vehicle's position in the RNS system
      parameters:
        - $ref: '#/components/parameters/vehicleId'
      responses:
        '200':
          description: Vehicle's position found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/place'
            application/json:
              schema:
                $ref: '#/components/schemas/place'
        # '400':
        #   $ref: '#/components/responses/invalidVehicleId'
        '404':
          $ref: '#/components/responses/vehicleNotFound'
  '/vehicles/{id}/destination':
    get:
      tags:
        - vehicles
      summary: retrieves one vehicle's destination
      operationId: getDestination
      description: Retrieves one vehicle's destination in the RNS system
      parameters:
        - $ref: '#/components/parameters/vehicleId'
      responses:
        '200':
          description: Vehicle's destination found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/place'
            application/json:
              schema:
                $ref: '#/components/schemas/place'
        # '400':
        #   $ref: '#/components/responses/invalidVehicleId'
        '404':
          $ref: '#/components/responses/vehicleNotFound'
  '/vehicles/{id}/entrytime':
    get:
      tags:
        - vehicles
      summary: retrieves one vehicle's entry time
      operationId: getEntryTime
      description: Retrieves one vehicle's entry time in the RNS system
      parameters:
        - $ref: '#/components/parameters/vehicleId'
      responses:
        '200':
          description: Vehicle's entry time found
          content:
            application/xml:
              schema:
                type: string
                format: date-time
                example: '2017-07-21T17:32:28Z'
                xml:
                  wrapped: true
                  name: entryTime
            application/json:
              schema:
                type: string
                format: date-time
                example: '2017-07-21T17:32:28Z'
        # '400':
        #   $ref: '#/components/responses/invalidVehicleId'
        '404':
          $ref: '#/components/responses/vehicleNotFound'
  '/vehicles/{id}/state':
    get:
      tags:
        - vehicles
      summary: retrieves one vehicle's state
      operationId: getState
      description: Retrieves one vehicle's state in the RNS system
      parameters:
        - $ref: '#/components/parameters/vehicleId'
      responses:
        '200':
          description: Vehicle's state found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/vehicleStatus'
            application/json:
              schema:
                $ref: '#/components/schemas/vehicleStatus'
        # '400':
        #   $ref: '#/components/responses/invalidVehicleId'
        '404':
          $ref: '#/components/responses/vehicleNotFound'
  '/vehicles/{id}/type':
    get:
      tags:
        - vehicles
      summary: retrieves one vehicle's type
      operationId: getType
      description: Retrieves one vehicle's type in the RNS system
      parameters:
        - $ref: '#/components/parameters/vehicleId'
      responses:
        '200':
          description: Vehicle's type found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/vehicleType'
            application/json:
              schema:
                $ref: '#/components/schemas/vehicleType'
        # '400':
        #   $ref: '#/components/responses/invalidVehicleId'
        '404':
          $ref: '#/components/responses/vehicleNotFound'
  '/places':
    get:
      tags:
        - places
      summary: retrieves all palces
      operationId: getPlaces
      description: Retrieves a set containing all places in the RNS system
      parameters:
        - name: idPrefix
          in: query
          required: false
          description: The ID prefix for selecting places
          schema:
            type: string
        - $ref: '#/components/parameters/pageNumber'
      responses:
        '200':
          description: Places returned
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/places'
            application/json:
              schema:
                $ref: '#/components/schemas/places'
        '400':
          $ref: '#/components/responses/atLeastOneParameterWrong'
  '/places/{id}':
    get:
      tags:
        - places
      summary: retrieves one place
      operationId: getPlace
      description: Retrieves one place in the RNS system
      parameters:
        - $ref: '#/components/parameters/placeId'
      responses:
        '200':
          description: Place found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/place'
            application/json:
              schema:
                $ref: '#/components/schemas/place'
        # '400':
        #   $ref: '#/components/responses/invalidPlaceId'
        '404':
          $ref: '#/components/responses/placeNotFound'
  '/places/{id}/capacity':
    get:
      tags:
        - places
      summary: retrieves the capacity of a place
      operationId: getCapacity
      description: Retrieves the capacity of one place in the RNS system
      parameters:
        - $ref: '#/components/parameters/placeId'
      responses:
        '200':
          description: Place capacity found
          content:
            application/json:
              schema:
                type: integer
                format: int32
            application/xml:
              schema:
                type: integer
                format: int32
                xml:
                  wrapped: true
                  name: capacity
        '400':
          description: 'Bad request: invalid place ID'
        '404':
          description: Place not found
  '/places/{id}/nextPlaces':
    get:
      tags:
        - places
      summary: retrieves all places to which this place is connected
      operationId: getNextPlaces
      description: Retrieves the set of all places to which this place is connected
      parameters:
        - $ref: '#/components/parameters/placeId'
      responses:
        '200':
          description: Next places found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nextPlaces'
            application/xml:
              schema:
                $ref: '#/components/schemas/nextPlaces'
        # '400':
        #   $ref: '#/components/responses/invalidPlaceId'
        '404':
          $ref: '#/components/responses/placeNotFound'
  '/places/gates':
    get:
      tags:
        - places
      summary: retrieves all gates
      operationId: getGates
      description: Retrieves a set containing all gates in the RNS system
      parameters:
        - name: type
          in: query
          required: false
          description: The ID prefix for selecting places
          schema:
            $ref: '#/components/schemas/gateType'
        - $ref: '#/components/parameters/pageNumber'
      responses:
        '200':
          description: Gates returned
          content: # TODO Can I enforce the place type?
            application/xml:
              schema:
                $ref: '#/components/schemas/places'
            application/json:
              schema:
                $ref: '#/components/schemas/places'
        '400':
          $ref: '#/components/responses/atLeastOneParameterWrong'
  '/places/parkingAreas':
    get:
      tags:
        - places
      summary: retrieves all parking areas
      operationId: getParkingAreas
      description: Retrieves a set containing all parking areas in the RNS system
      parameters:
        - name: services
          in: query
          required: false
          description: The set of services that parking areas must have
          schema:
            $ref: '#/components/schemas/services'
        - $ref: '#/components/parameters/pageNumber'
      responses:
        '200':
          description: Parking areas returned
          content: # TODO Can I enforce the place type?
            application/xml:
              schema:
                $ref: '#/components/schemas/places'
            application/json:
              schema:
                $ref: '#/components/schemas/places'
        '400':
          $ref: '#/components/responses/atLeastOneParameterWrong'
  '/places/roadSegments':
    get:
      tags:
        - places
      summary: retrieves all road segments
      operationId: getRoadSegments
      description: Retrieves a set containing all road segments in the RNS system
      parameters:
        - name: roadName
          in: query
          required: false
          description: The name of the road to which the segment must belong to
          schema:
            $ref: '#/components/schemas/roadName'
        - $ref: '#/components/parameters/pageNumber'
      responses:
        '200':
          description: Road segments returned
          content: # TODO Can I enforce the place type?
            application/xml:
              schema:
                $ref: '#/components/schemas/places'
            application/json:
              schema:
                $ref: '#/components/schemas/places'
        '400':
          $ref: '#/components/responses/atLeastOneParameterWrong'
  
servers:
  - url: 'https://virtserver.swaggerhub.com/marcomicera/RnsSystem/2.0-oas3'
  
components:
  schemas:
    vehicleType:
      type: string
      enum:
        - CAR
        - TRUCK
        - SHUTTLE
        - CARAVAN
      example: TRUCK
      xml:
        name: type
        attribute: true
    vehicleStatus:
      type: string
      enum:
        - PARKED
        - IN_TRANSIT
      example: PARKED
      xml:
        name: state
        attribute: true
    vehicleUri:
      type: string
      format: uri
      example: 'http://.../vehicles/...' # FIXME
    vehicles:
      type: object
      xml:
        name: vehicles
        attribute: false
      required:
        - vehicles
      properties:
        totalPages:
          type: integer
          minimum: 1
          example: 5
          default: 1
        page:
          type: integer
          minimum: 0
          example: 2
          default: 0
        next:
          type: string
          format: uri
          example: 'http://...' # FIXME
        vehicles:
          type: array
          uniqueItems: true
          minItems: 0
          xml:
            name: vehicles
            wrapped: true
          items:
            $ref: '#/components/schemas/vehicle'
      description: All the vehicles in the RNS system
    vehicle:
      description: A single vehicle in the RNS system
      type: object
      xml:
        name: vehicle
      required:
        - self
        - id
        - entryTime
        - type
        - state
        - origin
        - position
        - destination
      properties:
        self:
          $ref: '#/components/schemas/vehicleUri'
        id:
          type: string
          example: vehicle123
          xml:
            attribute: true
        entryTime:
          type: string
          format: date-time
          example: '2017-07-21T17:32:28Z'
          xml:
            attribute: false
        type:
          $ref: '#/components/schemas/vehicleType'
        state:
          $ref: '#/components/schemas/vehicleStatus'
        origin:
          $ref: '#/components/schemas/placeUri'
        position:
          $ref: '#/components/schemas/placeUri'
        destination:
          $ref: '#/components/schemas/placeUri'
    placeUri:
      type: string
      format: uri
      example: 'http://.../places/...' # FIXME
    places:
      type: object
      xml:
        name: places
        attribute: false
      required:
        - places
      properties:
        totalPages:
          type: integer
          minimum: 1
          example: 5
          default: 1
        page:
          type: integer
          minimum: 0
          example: 2
          default: 0
        next:
          type: string
          format: uri
          example: 'http://...' # FIXME
        places:
          type: array
          uniqueItems: true
          minItems: 0
          xml:
            name: places
            wrapped: true
          items:
            $ref: '#/components/schemas/place'
      description: All the places in the RNS system
    nextPlaces:
      type: array
      uniqueItems: true
      minItems: 0
      xml:
        wrapped: true
        name: nextPlaces
      items:
        type: string
        format: uri
        xml:
          name: nextPlace
      example: ['http://...', 'http://...']
    place:
      description: A single place in the RNS system
      type: object
      xml:
        name: place
      required:
        - self
        - id
        - capacity
        - type
      properties:
        self:
          $ref: '#/components/schemas/placeUri'
        id:
          type: string
          example: place123
          xml:
            attribute: true
        capacity:
          type: integer
          format: int32
          xml:
            attribute: true
        type:
          oneOf: # FIXME this is not shown in the GUI
            - $ref: '#/components/schemas/parkingArea'
            - $ref: '#/components/schemas/roadSegment'
            - $ref: '#/components/schemas/gate'
          xml:
            attribute: false
        nextPlaces:
          $ref: '#/components/schemas/nextPlaces'
    services:
      type: array
      uniqueItems: true
      minItems: 0
      items:
        type: string
      example: [Restroom, Bistro, Smoking area]
    parkingArea:
      description: A parking area in the RNS system
      type: object
      xml:
        name: parkingArea
      properties:
        services:
          $ref: '#/components/schemas/services'
    roadName:
      type: string
      xml:
        attribute: true
      example: White Avenue
    roadSegment:
      description: A road segment in the RNS system
      type: object
      xml:
        name: roadSegment
      required:
      - name
      - road
      properties:
        name:
          type: string
          xml:
            attribute: true
          example: RS123
        road:
          $ref: '#/components/schemas/roadName'
    gateType:
      type: string
      enum:
        - IN
        - OUT
        - INOUT
      example: IN
    gate:
      description: A gate in the RNS system
      type: object
      xml:
        name: gate
      required:
      - type
      properties:
        type:
          $ref: '#/components/schemas/gateType'
  parameters:
    pageNumber:
      name: page
      in: query
      required: false
      description: The desired page result
      schema:
        type: integer
        format: int32
        default: 0
    vehicleId:
      name: id
      in: path
      required: true
      description: The vehicle's plate ID of interest
      schema:
        type: string
    placeId:
      name: id
      in: path
      required: true
      description: The place ID of interest
      schema:
        type: string
  responses:
    atLeastOneParameterWrong:
      description: 'Bad request: at least one invalid parameter'
    # invalidVehicleId:
    #   description: 'Bad request: invalid vehicle ID'
    vehicleNotFound:
      description: 'Vehicle not found'
    # invalidPlaceId:
    #   description: 'Bad request: invalid place ID'
    placeNotFound:
      description: 'Place not found'