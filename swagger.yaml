openapi: 3.0.0

info:
  version: "2.0-oas3"
  title: RNS web service
  description: Road Navigation Services
  termsOfService: 'https://smartbear.com/terms-of-use/'
  contact:
    email: marco.micera+dp2@gmail.com
    name: Marco Micera
    url: 'https://marcomicera.github.io/'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
    
tags:
  - name: vehicles
    description: Managing vehicles within the RNS system
  - name: places
    description: Retrieving info about RNS places
  - name: connections
    description: How places are connected to each other
    
paths:
  /vehicles:
    get:
      tags:
        - vehicles
      summary: retrieves all vehicles
      operationId: getVehicles
      description: Retrieves a set containing all vehicles in the RNS system
      parameters:
        - name: since
          in: query
          required: false
          description: The entrance date/time since when vehicles have to be selected
          schema:
            type: string
            format: date-time
        - name: types
          in: query
          required: false
          description: The set of types of vehicles that have to be selected
          schema:
            type: array
            items:
              $ref: '#/components/schemas/vehicleType'
        - name: state
          in: query
          required: false
          description: The state of vehicles to be selected
          schema:
            $ref: '#/components/schemas/vehicleStatus'
      responses:
        '200':
          description: Vehicles returned
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/vehicles'
            application/json:
              schema:
                $ref: '#/components/schemas/vehicles'
        '400':
          description: 'Bad request: at least one invalid parameter'
  '/vehicles/{id}':
    get:
      tags:
        - vehicles
      summary: retrieves one vehicle
      operationId: getVehicle
      description: Retrieves one vehicle in the RNS system
      parameters:
        - name: id
          in: path
          required: true
          description: The plate id of the vehicle to get
          schema:
            type: string
      responses:
        '200':
          description: Vehicle found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/vehicle'
            application/json:
              schema:
                $ref: '#/components/schemas/vehicle'
        '400':
          description: 'Bad request: invalid vehicle ID'
        '404':
          description: Vehicle not found
  '/vehicles/{id}/origin':
    get:
      tags:
        - vehicles
      summary: retrieves one vehicle's origin
      operationId: getOrigin
      description: Retrieves one vehicle's origin in the RNS system
      parameters:
        - name: id
          in: path
          required: true
          description: The vehicle's plate ID of interest
          schema:
            type: string
      responses:
        '200':
          description: Vehicle's origin found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/place'
            application/json:
              schema:
                $ref: '#/components/schemas/place'
        '400':
          description: 'Bad request: invalid vehicle ID'
        '404':
          description: Vehicle not found
  '/vehicles/{id}/position':
    get:
      tags:
        - vehicles
      summary: retrieves one vehicle's position
      operationId: getPosition
      description: Retrieves one vehicle's position in the RNS system
      parameters:
        - name: id
          in: path
          required: true
          description: The vehicle's plate ID of interest
          schema:
            type: string
      responses:
        '200':
          description: Vehicle's position found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/place'
            application/json:
              schema:
                $ref: '#/components/schemas/place'
        '400':
          description: 'Bad request: invalid vehicle ID'
        '404':
          description: Vehicle not found
  '/vehicles/{id}/destination':
    get:
      tags:
        - vehicles
      summary: retrieves one vehicle's destination
      operationId: getDestination
      description: Retrieves one vehicle's destination in the RNS system
      parameters:
        - name: id
          in: path
          required: true
          description: The vehicle's plate ID of interest
          schema:
            type: string
      responses:
        '200':
          description: Vehicle's destination found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/place'
            application/json:
              schema:
                $ref: '#/components/schemas/place'
        '400':
          description: 'Bad request: invalid vehicle ID'
        '404':
          description: Vehicle not found
  '/vehicles/{id}/entrytime':
    get:
      tags:
        - vehicles
      summary: retrieves one vehicle's entry time
      operationId: getEntryTime
      description: Retrieves one vehicle's entry time in the RNS system
      parameters:
        - name: id
          in: path
          required: true
          description: The vehicle's plate ID of interest
          schema:
            type: string
      responses:
        '200':
          description: Vehicle's entry time found
          content:
            application/xml:
              schema:
                type: string
                format: date-time
                example: '2017-07-21T17:32:28Z'
            application/json:
              schema:
                type: string
                format: date-time
                example: '2017-07-21T17:32:28Z'
        '400':
          description: 'Bad request: invalid vehicle ID'
        '404':
          description: Vehicle not found
  '/vehicles/{id}/state':
    get:
      tags:
        - vehicles
      summary: retrieves one vehicle's state
      operationId: getState
      description: Retrieves one vehicle's state in the RNS system
      parameters:
        - name: id
          in: path
          required: true
          description: The vehicle's plate ID of interest
          schema:
            type: string
      responses:
        '200':
          description: Vehicle's state found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/vehicleStatus'
            application/json:
              schema:
                $ref: '#/components/schemas/vehicleStatus'
        '400':
          description: 'Bad request: invalid vehicle ID'
        '404':
          description: Vehicle not found
  '/vehicles/{id}/type':
    get:
      tags:
        - vehicles
      summary: retrieves one vehicle's type
      operationId: getType
      description: Retrieves one vehicle's type in the RNS system
      parameters:
        - name: id
          in: path
          required: true
          description: The vehicle's plate ID of interest
          schema:
            type: string
      responses:
        '200':
          description: Vehicle's type found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/vehicleType'
            application/json:
              schema:
                $ref: '#/components/schemas/vehicleType'
        '400':
          description: 'Bad request: invalid vehicle ID'
        '404':
          description: Vehicle not found
          
servers:
  - url: 'https://virtserver.swaggerhub.com/marcomicera/RnsSystem/1.0'
  
components:
  schemas:
    vehicleType:
      type: string
      enum:
        - CAR
        - TRUCK
        - SHUTTLE
        - CARAVAN
      example: TRUCK
      xml:
        name: type
        attribute: true
    vehicleStatus:
      type: string
      enum:
        - PARKED
        - IN_TRANSIT
      example: PARKED
      xml:
        name: state
        attribute: true
    vehicles:
      type: object
      xml:
        name: vehicles
        attribute: false
      required:
        - vehicles
      properties:
        totalPages:
          type: integer
          minimum: 0
          example: 5
        page:
          type: integer
          minimum: 0
          example: 2
        next:
          type: string
          format: uri
          example: 'http://...'
        vehicles:
          type: array
          xml:
            name: vehicles
            wrapped: true
          items:
            $ref: '#/components/schemas/vehicle'
      description: All the vehicles in the RNS system
    vehicle:
      description: A single vehicle in the RNS system
      type: object
      xml:
        name: vehicle
      required:
        - id
        - functionalType
        - links
      properties:
        self:
          type: string
          format: uri
          example: 'http://...'
        id:
          type: string
          example: vehicle123
          xml:
            attribute: true
        entryTime:
          type: string
          format: date-time
          example: '2017-07-21T17:32:28Z'
          xml:
            attribute: false
        type:
          $ref: '#/components/schemas/vehicleType'
        state:
          $ref: '#/components/schemas/vehicleStatus'
        origin:
          type: string
          format: uri
          example: 'http://...'
        position:
          type: string
          format: uri
          example: 'http://...'
        destination:
          type: string
          format: uri
          example: 'http://...'
    places:
      type: object
      xml:
        name: places
        attribute: false
      required:
        - places
      properties:
        totalPages:
          type: integer
          minimum: 0
          example: 5
        page:
          type: integer
          minimum: 0
          example: 2
        next:
          type: string
          format: uri
          example: 'http://...'
        places:
          type: array
          xml:
            name: places
            wrapped: true
          items:
            $ref: '#/components/schemas/place'
      description: All the places in the RNS system
    place:
      description: A single place in the RNS system
      type: object
      xml:
        name: place
      required:
        - id
      properties:
        self:
          type: string
          format: uri
          example: 'http://...'
        id:
          type: string
          example: place123
          xml:
            attribute: true
        type:
          oneOf:
            - $ref: '#/components/schemas/parkingArea'
            - $ref: '#/components/schemas/roadSegment'
            - $ref: '#/components/schemas/gate'
    parkingArea:
      description: A parking area in the RNS system
      type: object
      xml:
        name: parkingArea
      properties:
        services:
          type: array
          items:
            type: string
    roadSegment:
      description: A road segment in the RNS system
      type: object
      xml:
        name: roadSegment
      required:
      - name
      - road
      properties:
        name:
          type: string
          xml:
            attribute: true
        road:
          type: string
          xml:
            attribute: true
    gate:
      description: A gate in the RNS system
      type: object
      xml:
        name: gate
      required:
      - type
      properties:
        type:
          type: string
          enum:
            - IN
            - OUT
            - INOUT