swagger: '2.0'
info:
  version: '1.0'
  title: 'RNS web service'
  description: 'Road Navigation Services'
  termsOfService: https://smartbear.com/terms-of-use/
  contact:
    email: marco.micera+dp2@gmail.com
    name: Marco Micera
    url: https://marcomicera.github.io/
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

tags:
- name: vehicles
  description: Managing vehicles within the RNS system
- name: places
  description: Retrieving info about RNS places
- name: connections
  description: How places are connected to each other
  
definitions:
  vehicleType:
    type: string
    enum: &vehicleType
      - CAR
      - TRUCK
      - SHUTTLE
      - CARAVAN
    example: TRUCK
    xml:
      name: type
      attribute: true
  vehicleStatus:
    type: string
    enum: &vehicleStatus
      - PARKED
      - IN_TRANSIT
    example: PARKED
    xml:
      name: state
      attribute: true
  vehicles:
    type: object
    xml:
      name: vehicles
      attribute: false
    required:
    - vehicles
    properties:
      totalPages:
        type: integer
        minimum: 0
        example: 5
      page:
        type: integer
        minimum: 0
        example: 2
      next:
        type: string
        format: uri
        example: 'http://...' # TODO example
      vehicles:
        type: array
        xml:
          name: vehicles
          wrapped: true
        items:
          $ref: '#/definitions/vehicle'
    description: All the vehicles in the RNS system
  vehicle:
    description: A single vehicle in the RNS system
    type: object
    xml:
      name: node
    required:
    - id
    - functionalType
    - links
    properties:
      self:
        type: string
        format: uri
        example: 'http://...' # TODO example
      id:
        type: string
        example: vehicle4123
        xml:
          attribute: true
      entryTime:
        type: string
        format: date-time
        example: '2017-07-21T17:32:28Z'
        xml:
          attribute: false
      type: 
        $ref: '#/definitions/vehicleType'
      state:
        $ref: '#/definitions/vehicleStatus'
      origin:
        type: string
        format: uri
        example: 'http://...' # TODO example
      position:
        type: string
        format: uri
        example: 'http://...' # TODO example
      destination:
        type: string
        format: uri
        example: 'http://...' # TODO example
  
paths:
  /vehicles:
    get:
      tags:
      - vehicles
      summary: retrieves all vehicles
      operationId: getVehicles
      description: Retrieves a set containing all vehicles in the RNS system
      produces:
      - application/xml
      - application/json
      parameters:
        - name: since
          in: query
          required: false
          type: string
          format: date-time
          description: The entrance date/time since when vehicles have to be selected
        - name: types
          in: query
          required: false
          type: array
          items:
            type: string
            enum: *vehicleType
          description: The set of types of vehicles that have to be selected
        - name: state
          in: query
          required: false
          type: string
          enum: *vehicleStatus
          description: The state of vehicles to be selected
      responses:
        200:
          description: Vehicles returned
          schema:
            $ref: '#/definitions/vehicles'
        400:
          description: 'Bad request: at least one invalid parameter'

# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /marcomicera/RnsSystem/1.0
schemes:
 - https