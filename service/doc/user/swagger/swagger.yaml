openapi: 3.0.0

info:
  version: "2.0-oas3"
  title: RNS web service
  description: Road Navigation Services
  termsOfService: 'https://smartbear.com/terms-of-use/'
  contact:
    email: marco.micera+dp2@gmail.com
    name: Marco Micera
    url: 'https://marcomicera.github.io/'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
    
tags:
  - name: vehicles (user)
    description: Users API for vehicles management within the RNS system
  - name: vehicles (admin)
    description: Retrieving all info about vehicles within the RNS system
  - name: places (admin)
    description: Retrieving info about RNS places
  - name: connections (admin)
    description: How places are connected to each other
    
paths:
  '/vehicles':
    get:
      tags:
        - vehicles (admin)
      summary: retrieves all vehicles
      operationId: getVehicles
      description: Retrieves a set containing all vehicles in the RNS system
      parameters:
        - name: since
          in: query
          required: false
          description: The entrance date/time since when vehicles have to be selected
          schema:
            type: string
            format: date-time
        - name: types
          in: query
          required: false
          description: The set of types of vehicles that have to be selected
          schema:
            type: array
            uniqueItems: true
            items:
              $ref: '#/components/schemas/vehicleType'
            minItems: 0
        - name: state
          in: query
          required: false
          description: The state of vehicles to be selected
          schema:
            $ref: '#/components/schemas/vehicleStatus'
        - $ref: '#/components/parameters/pageNumber'
      responses:
        '200':
          description: Vehicles returned
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/vehicles'
            application/json:
              schema:
                $ref: '#/components/schemas/vehicles'
        '400':
          $ref: '#/components/responses/atLeastOneParameterWrong'
    post:
      tags:
        - vehicles (user)
      summary: add a new vehicle
      operationId: addVehicle
      requestBody:
        $ref: '#/components/requestBodies/entrance'
      responses:
        '201':
          description: 'New vehicle created, return suggest path'
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/newVehicle'
            application/json:
              schema:
                $ref: '#/components/schemas/newVehicle'
          links:
            getVehicleById:
              operationId: getVehicle
              parameters:
                id: '$response.body#/id'
              description: >
                The `id` value returned in the response can be used as
                the vehicle `id` parameter for all `GET /vehicle/{id}[/...]` methods.
            getVehicleByHATEOAS:
              operationId: getVehicle
              parameters:
                id: '$response.body#/self'
              description: >
                The `self` URI returned in the response can be used to directly
                access a vehicle for all `GET /vehicle/{id}[/...]` methods.
        '400':
          description: 'Bad request: the vehicle object was malformed'
        '403':
          description: 'Permission not granted: reason in response body'
          content:
            application/xml:
              schema:
                type: string
                xml:
                  name: reason
                example: Destination is unreachable
            application/json:
              schema:
                type: string
                example: Destination is unreachable
        '404':
          description: 'At least a place has not been found'
        '409':
          description: 'Conflict: vehicle already existed'
  '/vehicles/{id}':
    get:
      tags:
        - vehicles (admin)
      summary: retrieves a vehicle
      operationId: getVehicle
      description: Retrieves a vehicle in the RNS system
      parameters:
        - $ref: '#/components/parameters/vehicleId'
      responses:
        '200':
          description: Vehicle found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/vehicle'
            application/json:
              schema:
                $ref: '#/components/schemas/vehicle'
        '404':
          $ref: '#/components/responses/vehicleNotFound'
    delete:
      tags:
        - vehicles (user)
        - vehicles (admin)
      summary: deletes a vehicle
      operationId: deleteVehicle
      description: Deletes a vehicle from the RNS system
      parameters:
        - $ref: '#/components/parameters/vehicleId'
      responses:
        '204':
          description: Vehicle successfully deleted
        '403':
          description: 'Forbidden: vehicle is currently not in an OUT or INOUT gate'
        '404':
          $ref: '#/components/responses/vehicleNotFound'
  '/vehicles/{id}/origin':
    get:
      tags:
        - vehicles (admin)
      summary: retrieves a vehicle's origin
      operationId: getOrigin
      description: Retrieves a vehicle's origin in the RNS system
      parameters:
        - $ref: '#/components/parameters/vehicleId'
      responses:
        '200':
          description: Vehicle's origin found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/genericPlace'
            application/json:
              schema:
                $ref: '#/components/schemas/genericPlace'
        '404':
          $ref: '#/components/responses/vehicleNotFound'
  '/vehicles/{id}/position':
    get:
      tags:
        - vehicles (admin)
      summary: retrieves a vehicle's position
      operationId: getPosition
      description: Retrieves a vehicle's position in the RNS system
      parameters:
        - $ref: '#/components/parameters/vehicleId'
      responses:
        '200':
          description: Vehicle's position found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/genericPlace'
            application/json:
              schema:
                $ref: '#/components/schemas/genericPlace'
        '404':
          $ref: '#/components/responses/vehicleNotFound'
    put:
      tags:
        - vehicles (user)
      summary: updates a vehicle's position
      operationId: setPosition
      description: Updates a vehicle's position in the RNS system
      parameters:
        - $ref: '#/components/parameters/vehicleId'
      requestBody:
        $ref: '#/components/requestBodies/position'
      responses:
        '200':
          description: Vehicle's position updated. Replying with suggested path towards destination
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/suggestedPath'
            application/json:
              schema:
                $ref: '#/components/schemas/suggestedPath'
        '204':
          description: Vehicle's position updated. Destination is not reachable anymore
        '400':
          description: 'Bad request: destination is unknown or not reachable from the previous position'
        '404':
          $ref: '#/components/responses/vehicleNotFound'
  '/vehicles/{id}/destination':
    get:
      tags:
        - vehicles (admin)
      summary: retrieves a vehicle's destination
      operationId: getDestination
      description: Retrieves a vehicle's destination in the RNS system
      parameters:
        - $ref: '#/components/parameters/vehicleId'
      responses:
        '200':
          description: Vehicle's destination found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/genericPlace'
            application/json:
              schema:
                $ref: '#/components/schemas/genericPlace'
        '404':
          $ref: '#/components/responses/vehicleNotFound'
  '/vehicles/{id}/entrytime':
    get:
      tags:
        - vehicles (admin)
      summary: retrieves a vehicle's entry time
      operationId: getEntryTime
      description: Retrieves a vehicle's entry time in the RNS system
      parameters:
        - $ref: '#/components/parameters/vehicleId'
      responses:
        '200':
          description: Vehicle's entry time found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/entryTime'
            application/json:
              schema:
                $ref: '#/components/schemas/entryTime'
        '404':
          $ref: '#/components/responses/vehicleNotFound'
  '/vehicles/{id}/state':
    get:
      tags:
        - vehicles (admin)
      summary: retrieves a vehicle's state
      operationId: getState
      description: Retrieves a vehicle's state in the RNS system
      parameters:
        - $ref: '#/components/parameters/vehicleId'
      responses:
        '200':
          description: Vehicle's state found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/vehicleStatus'
            application/json:
              schema:
                $ref: '#/components/schemas/vehicleStatus'
        '404':
          $ref: '#/components/responses/vehicleNotFound'
    put:
      tags:
        - vehicles (user)
      summary: updates a vehicle's state
      operationId: setState
      description: Updates a vehicle's state in the RNS system
      requestBody:
        $ref: '#/components/requestBodies/state'
      parameters:
        - $ref: '#/components/parameters/vehicleId'
      responses:
        '204':
          description: Vehicle's state updated
        '400':
          description: New state is invalid
        '404':
          $ref: '#/components/responses/vehicleNotFound'
  '/vehicles/{id}/type':
    get:
      tags:
        - vehicles (admin)
      summary: retrieves a vehicle's type
      operationId: getVehicleType
      description: Retrieves a vehicle's type in the RNS system
      parameters:
        - $ref: '#/components/parameters/vehicleId'
      responses:
        '200':
          description: Vehicle's type found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/vehicleType'
            application/json:
              schema:
                $ref: '#/components/schemas/vehicleType'
        '404':
          $ref: '#/components/responses/vehicleNotFound'
  '/vehicles/{id}/path':
    get:
      tags:
        - vehicles (admin)
      summary: retrieves a vehicle's type
      operationId: getPath
      description: Retrieves a vehicle's suggested path in the RNS system
      parameters:
        - $ref: '#/components/parameters/vehicleId'
      responses:
        '200':
          description: Vehicle's suggested path found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/suggestedPath'
            application/json:
              schema:
                $ref: '#/components/schemas/suggestedPath'
        '404':
          $ref: '#/components/responses/vehicleNotFound'
  '/places':
    get:
      tags:
        - places (admin)
      summary: retrieves all palces
      operationId: getPlaces
      description: Retrieves a set containing all places in the RNS system
      parameters:
        - name: idPrefix
          in: query
          required: false
          description: The ID prefix for selecting places
          schema:
            type: string
        - $ref: '#/components/parameters/pageNumber'
      responses:
        '200':
          description: Places returned
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/genericPlaces'
            application/json:
              schema:
                $ref: '#/components/schemas/genericPlaces'
        '400':
          $ref: '#/components/responses/atLeastOneParameterWrong'
  '/places/{id}':
    get:
      tags:
        - places (admin)
      summary: retrieves a place
      operationId: getPlace
      description: Retrieves a place in the RNS system
      parameters:
        - $ref: '#/components/parameters/placeId'
      responses:
        '200':
          description: Place found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/genericPlace'
            application/json:
              schema:
                $ref: '#/components/schemas/genericPlace'
        '404':
          $ref: '#/components/responses/placeNotFound'
  '/places/{id}/capacity':
    get:
      tags:
        - places (admin)
      summary: retrieves the capacity of a place
      operationId: getCapacity
      description: Retrieves the capacity of a place in the RNS system
      parameters:
        - $ref: '#/components/parameters/placeId'
      responses:
        '200':
          description: Place capacity found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/capacity'
            application/json:
              schema:
                $ref: '#/components/schemas/capacity'
        '404':
          $ref: '#/components/responses/placeNotFound'
  '/places/{id}/nextPlaces':
    get:
      tags:
        - places (admin)
      summary: retrieves all places to which this place is connected
      operationId: getNextPlaces
      description: Retrieves the set of all places to which this place is connected
      parameters:
        - $ref: '#/components/parameters/placeId'
      responses:
        '200':
          description: Next places found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/nextPlaces'
            application/json:
              schema:
                $ref: '#/components/schemas/nextPlaces'
        '404':
          $ref: '#/components/responses/placeNotFound'
  '/places/{id}/vehicles':
    get:
      tags:
        - places (admin)
      summary: retrieves all vehicles in a place
      operationId: getVehiclesInPlace
      description: Retrieves the vehicles in a place of the RNS system
      parameters:
        - $ref: '#/components/parameters/placeId'
      responses:
        '200':
          description: Vehicles found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/vehicles'
            application/json:
              schema:
                $ref: '#/components/schemas/vehicles'
        '404':
          $ref: '#/components/responses/placeNotFound'
  '/places/gates':
    get:
      tags:
        - places (admin)
      summary: retrieves all gates
      operationId: getGates
      description: Retrieves a set containing all gates in the RNS system
      parameters:
        - name: type
          in: query
          required: false
          description: The ID prefix for selecting places
          schema:
            $ref: '#/components/schemas/gateType'
        - $ref: '#/components/parameters/pageNumber'
      responses:
        '200':
          description: Gates returned
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/gates'
            application/json:
              schema:
                $ref: '#/components/schemas/gates'
        '400':
          $ref: '#/components/responses/atLeastOneParameterWrong'
  # '/gates/{id}': # FIXME this is not present in the RNS-API
  #   get:
  #     tags:
  #       - places (admin)
  #     summary: retrieves one gate
  #     operationId: getGate
  #     description: Retrieves one gate in the RNS system
  #     parameters:
  #       - $ref: '#/components/parameters/placeId'
  #     responses:
  #       '200':
  #         description: Gate found
  #         content:
  #           application/xml:
  #             schema:
  #               $ref: '#/components/schemas/gate'
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/gate'
  #       '404':
  #         $ref: '#/components/responses/placeNotFound'
  '/gates/{id}/type':
    get:
      tags:
        - places (admin)
      summary: retrieves one gate's type
      operationId: getGateType
      description: Retrieves one gate in the RNS system
      parameters:
        - $ref: '#/components/parameters/placeId'
      responses:
        '200':
          description: Gate's type found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/gateType'
            application/json:
              schema:
                $ref: '#/components/schemas/gateType'
        '404':
          $ref: '#/components/responses/placeNotFound'
  '/places/parkingAreas':
    get:
      tags:
        - places (admin)
      summary: retrieves all parking areas
      operationId: getParkingAreas
      description: Retrieves a set containing all parking areas in the RNS system
      parameters:
        - name: services
          in: query
          required: false
          description: The set of services that parking areas must have
          schema:
            $ref: '#/components/schemas/services'
        - $ref: '#/components/parameters/pageNumber'
      responses:
        '200':
          description: Parking areas returned
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/parkingAreas'
            application/json:
              schema:
                $ref: '#/components/schemas/parkingAreas'
        '400':
          $ref: '#/components/responses/atLeastOneParameterWrong'
  # '/places/parkingAreas/{id}': # FIXME this is not present in the RNS-API
  #   get:
  #     tags:
  #       - places (admin)
  #     summary: retrieves one parking area
  #     operationId: getParkingArea
  #     description: Retrieves one parking area in the RNS system
  #     parameters:
  #       - $ref: '#/components/parameters/placeId'
  #     responses:
  #       '200':
  #         description: Parking area found
  #         content:
  #           application/xml:
  #             schema:
  #               $ref: '#/components/schemas/parkingArea'
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/parkingArea'
  #       '404':
  #         $ref: '#/components/responses/placeNotFound'
  '/places/parkingAreas/{id}/services':
    get:
      tags:
        - places (admin)
      summary: retrieves one parking area's services
      operationId: getServices
      description: Retrieves one parking area's services in the RNS system
      parameters:
        - $ref: '#/components/parameters/placeId'
      responses:
        '200':
          description: Parking area's services found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/services'
            application/json:
              schema:
                $ref: '#/components/schemas/services'
        '404':
          $ref: '#/components/responses/placeNotFound'
  '/places/roadSegments':
    get:
      tags:
        - places (admin)
      summary: retrieves all road segments
      operationId: getRoadSegments
      description: Retrieves a set containing all road segments in the RNS system
      parameters:
        - name: roadName
          in: query
          required: false
          description: The name of the road to which the segment must belong to
          schema:
            $ref: '#/components/schemas/roadName'
        - $ref: '#/components/parameters/pageNumber'
      responses:
        '200':
          description: Road segments returned
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/roadSegments'
            application/json:
              schema:
                $ref: '#/components/schemas/roadSegments'
        '400':
          $ref: '#/components/responses/atLeastOneParameterWrong'
  # '/places/roadSegments/{id}': # FIXME this is not present in the RNS-API
  #   get:
  #     tags:
  #       - places (admin)
  #     summary: retrieves one road segment
  #     operationId: getRoadSegment
  #     description: Retrieves one road segment in the RNS system
  #     parameters:
  #       - $ref: '#/components/parameters/placeId'
  #     responses:
  #       '200':
  #         description: Road segment found
  #         content:
  #           application/xml:
  #             schema:
  #               $ref: '#/components/schemas/roadSegment'
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/roadSegment'
  #       '404':
  #         $ref: '#/components/responses/placeNotFound'
  '/places/roadSegments/{id}/name':
    get:
      tags:
        - places (admin)
      summary: retrieves one road segment's name
      operationId: getRoadSegmentName
      description: Retrieves one road segment's name in the RNS system
      parameters:
        - $ref: '#/components/parameters/placeId'
      responses:
        '200':
          description: Road segment's name found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/roadSegmentName'
            application/json:
              schema:
                $ref: '#/components/schemas/roadSegmentName'
        '404':
          $ref: '#/components/responses/placeNotFound'
  '/places/roadSegments/{id}/road':
    get:
      tags:
        - places (admin)
      summary: retrieves one road segment's road name
      operationId: getRoadSegmentRoadName
      description: Retrieves one road segment's road name in the RNS system
      parameters:
        - $ref: '#/components/parameters/placeId'
      responses:
        '200':
          description: Road segment's road name found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/roadName'
            application/json:
              schema:
                $ref: '#/components/schemas/roadName'
        '404':
          $ref: '#/components/responses/placeNotFound'
  '/connections':
    get:
      tags:
        - connections (admin)
      summary: retrieves all connections
      operationId: getConnections
      description: Retrieves a set containing all connections in the RNS system
      parameters:
        - $ref: '#/components/parameters/pageNumber'
      responses:
        '200':
          description: Connections returned
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/connections'
            application/json:
              schema:
                $ref: '#/components/schemas/connections'
  # '/connections/{id}': # FIXME this is not present in the RNS-API
  #   get:
  #     tags:
  #       - connections (admin)
  #     summary: retrieves one connection
  #     operationId: getConnection
  #     description: Retrieves one connection in the RNS system
  #     parameters:
  #       - $ref: '#/components/parameters/connectionId'
  #     responses:
  #       '200':
  #         description: Connection found
  #         content:
  #           application/xml:
  #             schema:
  #               $ref: '#/components/schemas/connection'
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/connection'
  #       '404':
  #         $ref: '#/components/responses/connectionNotFound'
  '/connections/{id}/from':
    get:
      tags:
        - connections (admin)
      summary: retrieves one connection's origin
      operationId: getFrom
      description: Retrieves one connection's origin in the RNS system
      parameters:
        - $ref: '#/components/parameters/connectionId'
      responses:
        '200':
          description: Connection's origin found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/genericPlace'
            application/json:
              schema:
                $ref: '#/components/schemas/genericPlace'
        '404':
          $ref: '#/components/responses/connectionNotFound'
  '/connections/{id}/to':
    get:
      tags:
        - connections (admin)
      summary: retrieves one connection's endpoint
      operationId: getto
      description: Retrieves one connection's endpoint in the RNS system
      parameters:
        - $ref: '#/components/parameters/connectionId'
      responses:
        '200':
          description: Connection's endpoint found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/genericPlace'
            application/json:
              schema:
                $ref: '#/components/schemas/genericPlace'
        '404':
          $ref: '#/components/responses/connectionNotFound'
  
servers:
  - url: 'https://virtserver.swaggerhub.com/marcomicera/RnsSystem/2.0-oas3'
  - url: 'http://localhost:8080/RnsSystem/rest'
  
components:
  schemas:
    totalPages:
      description: Indicates the total number of pages in a multi-paged response
      type: integer
      minimum: 1
      example: 5
      default: 1
    page:
      description: Indicates the page number of a multi-paged response
      type: integer
      minimum: 0
      example: 2
      default: 0
    vehicleType:
      description: The type of a vehicle in the RNS system
      type: string
      enum:
        - CAR
        - TRUCK
        - SHUTTLE
        - CARAVAN
      example: TRUCK
      xml:
        name: type
        attribute: true
    vehicleStatus:
      description: The state a of vehicle in the RNS system
      type: string
      enum:
        - PARKED
        - IN_TRANSIT
      example: PARKED
      xml:
        name: state
        attribute: true
    vehicleUri:
      description: An RNS vehicle URI (so it can have its proper example)
      type: string
      format: uri
      example: 'http://localhost:8080/RnsSystem/rest/vehicles/vehicle123'
    nextVehiclesPage:
      description: The next page in a multi-paged vehicles list response (so it can have its proper example)
      type: string
      format: uri
      example: 'http://localhost:8080/RnsSystem/rest/vehicles/...'
    vehicles:
      description: A list of vehicles in the RNS system
      type: object
      xml:
        name: vehicles
        attribute: false
      required:
        - vehicles
      properties:
        totalPages:
          $ref: '#/components/schemas/totalPages'
        page:
          $ref: '#/components/schemas/page'
        next:
          $ref: '#/components/schemas/nextVehiclesPage'
        vehicles:
          type: array
          uniqueItems: true
          minItems: 0
          xml:
            name: vehicles
            wrapped: true
          items:
            $ref: '#/components/schemas/vehicle'
    entryTime:
      description: The entry time in which a vehicle has entered the RNS sytem
      type: string
      format: date-time
      example: '2017-07-21T17:32:28Z'
      xml:
        wrapped: true
        name: entryTime
    vehicleId:
      description: A vehicle plate ID (so it can have its proper example)
      type: string
      example: vehicle123
      xml:
        attribute: true
        name: id
    vehicle:
      description: A single vehicle in the RNS system
      type: object
      xml:
        name: vehicle
      required:
        - self
        - id
        - entryTime
        - type
        - state
        - origin
        - position
        - destination
      properties:
        self:
          $ref: '#/components/schemas/vehicleUri'
        id:
          $ref: '#/components/schemas/vehicleId'
        entryTime:
          $ref: '#/components/schemas/entryTime'
        type:
          $ref: '#/components/schemas/vehicleType'
        state:
          $ref: '#/components/schemas/vehicleStatus'
        origin:
          $ref: '#/components/schemas/placeUri'
        position:
          $ref: '#/components/schemas/placeUri'
        destination:
          $ref: '#/components/schemas/placeUri'
    placeUri:
      description: An RNS generic place URI (so it can have its proper example)
      type: string
      format: uri
      example: 'http://localhost:8080/RnsSystem/rest/places/place123'
    nextPlaceUri:
      description: An RNS reachable generic place URI (so it can have its proper example)
      type: string
      format: uri
      xml:
        name: nextPlace
      example: 'http://localhost:8080/RnsSystem/rest/places/nextPlace123'
    positionUri:
      description: An RNS generic position URI (so it can have its proper example)
      type: string
      format: uri
      xml:
        name: position
      example: 'http://localhost:8080/RnsSystem/rest/places/position123'
    suggestedPlaceUri:
      description: An RNS suggested generic place URI (so it can have its proper example)
      type: string
      format: uri
      xml:
        name: place
      example: 'http://localhost:8080/RnsSystem/rest/places/suggestedPlace123'
    nextPlacesPage:
      description: The next page in a multi-paged generic places list response (so it can have its proper example)
      type: string
      format: uri
      example: 'http://localhost:8080/RnsSystem/rest/places/...'
    basePlaces:
      description: Basic structure for lists of places in the RNS system (not instantiable, for inheritance purposes)
      type: object
      xml:
        name: places
        attribute: false
      required:
        - places
      properties:
        totalPages:
          $ref: '#/components/schemas/totalPages'
        page:
          $ref: '#/components/schemas/page'
        next:
          $ref: '#/components/schemas/nextPlacesPage'
    genericPlaces:
      description: A list of generic places in the RNS system
      oneOf:
        - $ref: '#/components/schemas/parkingAreas'
        - $ref: '#/components/schemas/roadSegments'
        - $ref: '#/components/schemas/gates'
    nextPlaces:
      description: A list of reachable generic place URIs (so it can have its proper example)
      type: array
      uniqueItems: true
      minItems: 0
      xml:
        wrapped: true
        name: nextPlaces
      items:
        $ref: '#/components/schemas/nextPlaceUri'
      example: 
        - 'http://localhost:8080/RnsSystem/rest/places/place1'
        - 'http://localhost:8080/RnsSystem/rest/places/place2'
        - 'http://localhost:8080/RnsSystem/rest/places/place3'
    capacity:
      description: The capacity of a place in terms of supported vehicles
      type: integer
      format: int32
      xml:
        wrapped: true
        name: capacity
      minimum: 0
      example: 100
    placeId:
      description: The ID of a place in the RNS system
      type: string
      example: place123
      xml:
        attribute: true
    basePlace:
      description: Basic place data structure (not instantiable, for inheritance purposes)
      type: object
      xml:
        name: place
      required:
        - self
        - id
        - capacity
      properties:
        self:
          $ref: '#/components/schemas/placeUri'
        id:
          $ref: '#/components/schemas/placeId'
        capacity:
          $ref: '#/components/schemas/capacity'
        nextPlaces:
          $ref: '#/components/schemas/nextPlaces'
    genericPlace:
      description: Generic place in the RNS system
      oneOf:
        - $ref: '#/components/schemas/parkingArea'
        - $ref: '#/components/schemas/roadSegment'
        - $ref: '#/components/schemas/gate'
      xml:
        attribute: false
    services:
      type: array
      uniqueItems: true
      minItems: 0
      items:
        type: string
        xml:
          name: service
      example: [Restroom, Bistro, Smoking area]
      xml:
        wrapped: true
        name: services
    parkingAreas:
      description: List of parking areas in the RNS system
      allOf:
        - $ref: '#/components/schemas/basePlaces'
        - type: array
          uniqueItems: true
          minItems: 0
          xml:
            name: parkingAreas
            wrapped: true
          items:
            $ref: '#/components/schemas/parkingArea'
    parkingArea:
      description: A parking area in the RNS system
      allOf:
        - $ref: '#/components/schemas/basePlace'
        - type: object
          xml:
            name: parkingArea
          properties:
            services:
              $ref: '#/components/schemas/services'
    roadName:
      type: string
      xml:
        attribute: true
      example: White Avenue
    roadSegmentName:
      type: string
      xml:
        attribute: true
      example: RS123
    roadSegments:
      description: List of road segments in the RNS system
      allOf:
        - $ref: '#/components/schemas/basePlaces'
        - type: array
          uniqueItems: true
          minItems: 0
          xml:
            name: roadSegments
            wrapped: true
          items:
            $ref: '#/components/schemas/roadSegment'
    roadSegment:
      description: A road segment in the RNS system
      allOf:
        - $ref: '#/components/schemas/basePlace'
        - type: object
          xml:
            name: roadSegment
          required:
          - name
          - road
          properties:
            name:
              $ref: '#/components/schemas/roadSegmentName'
            road:
              $ref: '#/components/schemas/roadName'
    gateType:
      type: string
      enum:
        - IN
        - OUT
        - INOUT
      example: IN
    gates:
      description: List of gates in the RNS system
      allOf:
        - $ref: '#/components/schemas/basePlaces'
        - type: array
          uniqueItems: true
          minItems: 0
          xml:
            name: gates
            wrapped: true
          items:
            $ref: '#/components/schemas/gate'
    gate:
      description: A gate in the RNS system
      allOf:
        - $ref: '#/components/schemas/basePlace'
        - type: object
          required:
          - type
          properties:
            type:
              $ref: '#/components/schemas/gateType'
    connectionUri:
      type: string
      format: uri
      example: 'http://localhost:8080/RnsSystem/rest/connections/...'
    nextConnectionsPage:
      type: string
      format: uri
      example: 'http://localhost:8080/RnsSystem/rest/connections/...'
    connections:
      type: object
      xml:
        name: connections
        attribute: false
      required:
        - connections (admin)
      properties:
        totalPages:
          $ref: '#/components/schemas/totalPages'
        page:
          $ref: '#/components/schemas/page'
        next:
          $ref: '#/components/schemas/nextConnectionsPage'
        connections:
          type: array
          uniqueItems: true
          minItems: 0
          xml:
            name: connections
            wrapped: true
          items:
            $ref: '#/components/schemas/connection'
      description: All the connections in the RNS system
    connectionId:
      type: string
      example: connection123
      xml:
        attribute: true
    connection:
      description: A connection between two places in the RNS system
      type: object
      xml:
        name: connection
      required:
      - from
      - to
      properties:
        self:
          $ref: '#/components/schemas/connectionUri'
        id:
          $ref: '#/components/schemas/connectionId'
        from:
          $ref: '#/components/schemas/placeUri'
        to:
          $ref: '#/components/schemas/placeUri'
    entrance:
      description: A vehicle entrance request in the RNS system
      type: object
      xml:
        name: entrance
      required:
      - gateType
      - destination
      - vehicleId
      - vehicleType
      properties:
        gate:
          type: object
          properties:
            type: 
              type: string
              enum: [IN, INOUT]
              xml:
                attribute: true
        vehicle:
          type: object
          properties:
            vehicleId:
              $ref: '#/components/schemas/vehicleId'
            vehicleType:
              $ref: '#/components/schemas/vehicleType'    
        destination:
          $ref: '#/components/schemas/placeUri'
    suggestedPath:
      description: Path of places suggested to the user upon vehicle entrance
      type: array
      uniqueItems: true
      minItems: 1
      xml:
        name: suggestedPath
        wrapped: true
      items:
        $ref: '#/components/schemas/suggestedPlaceUri'
      example:
        - 'http://localhost:8080/RnsSystem/rest/places/suggestedPlace1'
        - 'http://localhost:8080/RnsSystem/rest/places/suggestedPlace2'
        - 'http://localhost:8080/RnsSystem/rest/places/suggestedPlace3'
    newVehicle:
      description: A freshly-insterted vehicle in the RNS system
      type: object
      xml:
        name: newVehicle
      properties: 
        self:
          $ref: '#/components/schemas/vehicleUri'
        id:
          $ref: '#/components/schemas/vehicleId'
        suggestedPath:
          $ref: '#/components/schemas/suggestedPath'
  parameters:
    pageNumber:
      name: page
      in: query
      required: false
      description: The desired page result
      schema:
        type: integer
        format: int32
        default: 0
    vehicleId:
      name: id
      in: path
      required: true
      description: The vehicle's plate ID of interest
      schema:
        $ref: '#/components/schemas/vehicleId'
    placeId:
      name: id
      in: path
      required: true
      description: The place ID of interest
      schema:
        $ref: '#/components/schemas/placeId'
    connectionId:
      name: id
      in: path
      required: true
      description: The connection ID of interest
      schema:
        $ref: '#/components/schemas/connectionId'
  requestBodies:
    entrance:
      description: Vehicle that needs to be added to the RNS system
      content:
        application/xml:
          schema:
            $ref: '#/components/schemas/entrance'
        application/json:
          schema:
            $ref: '#/components/schemas/entrance'
      required: true
    position:
      description: Position to which a vehicle in the RNS system has moved
      content:
        application/xml:
          schema:
            $ref: '#/components/schemas/positionUri'
        application/json:
          schema:
            $ref: '#/components/schemas/positionUri'
      required: true
    state:
      description: New status of a vehicle in the RNS system
      content:
        application/xml:
          schema:
            $ref: '#/components/schemas/vehicleStatus'
        application/json:
          schema:
            $ref: '#/components/schemas/vehicleStatus'
      required: true
  responses:
    atLeastOneParameterWrong:
      description: 'Bad request: at least one invalid parameter'
    vehicleNotFound:
      description: 'Vehicle not found'
    placeNotFound:
      description: 'Place not found'
    connectionNotFound:
      description: 'Connection not found'